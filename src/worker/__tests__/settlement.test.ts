import { optimize, clearNonAtomicSets, clearPairs, createVStarAndSums, getValidSubsetsFromNumber, round } from "@/worker/settlement";
import { describe, expect, it } from 'vitest';

type balance = [string, string];
type returnBal = [string, string, string];

describe('Test Optimization', function () {
    const timeout = 5000;

    function getBalance(sol: Array<returnBal>): Array<balance> {
        const txs = new Array<number>(20).fill(0);
        sol.forEach(e => {
            txs[+e[0]] += +e[2]
            txs[+e[1]] -= +e[2]
        })
        return txs.map((e, index) => [index.toString(), e.toFixed(1).toString()]);
    }

    it("Test_1", () => {
        const test: Array<balance> = [["0", "100.0"], ["1", "0.0"], ["2", "0.0"], ["3", "0.0"], ["4", "0.0"], ["5", "0.0"], ["6", "0.0"], ["7", "0.0"], ["8", "0.0"], ["9", "0.0"], ["10", "0.0"], ["11", "0.0"], ["12", "0.0"], ["13", "0.0"], ["14", "0.0"], ["15", "0.0"], ["16", "0.0"], ["17", "0.0"], ["18", "0.0"], ["19", "-100.0"]]
        const sol: Array<returnBal> = round([["0", "19", "100"]])
        expect(optimize(test).sort()).toStrictEqual(sol.sort());
    }, timeout)

    it("Test_2", () => {
        const test: Array<balance> = [["0", "0.0"], ["1", "0.0"], ["2", "0.0"], ["3", "0.0"], ["4", "0.0"], ["5", "0.0"], ["6", "0.0"], ["7", "0.0"], ["8", "0.0"], ["9", "0.0"], ["10", "0.0"], ["11", "0.0"], ["12", "0.0"], ["13", "0.0"], ["14", "0.0"], ["15", "0.0"], ["16", "0.0"], ["17", "0.0"], ["18", "0.0"], ["19", "0.0"]]
        const sol: Array<returnBal> = round([])
        expect(optimize(test).sort()).toStrictEqual(sol.sort());
    }, timeout)

    it("Test_3", () => {
        const test: Array<balance> = [["0", "1.0"], ["1", "4.0"], ["2", "16.0"], ["3", "21.0"], ["4", "32.0"], ["5", "-2.0"], ["6", "-8.0"], ["7", "-64.0"]]
        const sol: Array<returnBal> = round([["0", "5", "1"], ["1", "5", "1"], ["1", "6", "3"], ["2", "6", "5"], ["2", "7", "11"], ["3", "7", "21"], ["4", "7", "32"]])
        expect(optimize(test).sort().sort()).toStrictEqual(sol.sort());
    }, timeout)

    it("Test_4", () => {
        const test: Array<balance> = [["0", "10.0"], ["1", "11.0"], ["2", "12.0"], ["3", "13.0"], ["4", "14.0"], ["5", "15.0"], ["6", "16.0"], ["7", "17.0"], ["8", "18.0"], ["9", "19.0"], ["10", "-1.0"], ["11", "-1.0"], ["12", "-1.0"], ["13", "-1.0"], ["14", "-1.0"], ["15", "-1.0"], ["16", "-1.0"], ["17", "-1.0"], ["18", "-1.0"], ["19", "-136.0"]]
        const sol: Array<returnBal> = round([["0", "10", "1"], ["0", "11", "1"], ["0", "12", "1"], ["0", "13", "1"], ["0", "14", "1"], ["0", "15", "1"], ["0", "16", "1"], ["0", "17", "1"], ["0", "18", "1"], ["0", "19", "1"], ["1", "19", "11"], ["2", "19", "12"], ["3", "19", "13"], ["4", "19", "14"], ["5", "19", "15"], ["6", "19", "16"], ["7", "19", "17"], ["8", "19", "18"], ["9", "19", "19"]])
        expect(optimize(test).sort()).toStrictEqual(sol.sort());
    }, timeout)

    it("Test_5", () => {
        const test: Array<balance> = [["0", "2.0"], ["1", "2.0"], ["2", "2.0"], ["3", "2.0"], ["4", "2.0"], ["5", "2.0"], ["6", "2.0"], ["7", "2.0"], ["8", "2.0"], ["9", "2.0"], ["10", "-1.0"], ["11", "-1.0"], ["12", "-1.0"], ["13", "-1.0"], ["14", "-1.0"], ["15", "-1.0"], ["16", "-1.0"], ["17", "-1.0"], ["18", "-1.0"], ["19", "-11.0"]]
        const sol: Array<returnBal> = round([["0", "10", "1"], ["0", "11", "1"], ["1", "12", "1"], ["1", "13", "1"], ["2", "14", "1"], ["2", "15", "1"], ["3", "16", "1"], ["3", "17", "1"], ["4", "18", "1"], ["4", "19", "1"], ["5", "19", "2"], ["6", "19", "2"], ["7", "19", "2"], ["8", "19", "2"], ["9", "19", "2"]])
        expect(optimize(test).sort()).toStrictEqual(sol.sort());
    }, timeout)

    it("Test_6", () => {
        const test: Array<balance> = [["0", "99.0"], ["1", "99.0"], ["2", "99.0"], ["3", "99.0"], ["4", "99.0"], ["5", "99.0"], ["6", "99.0"], ["7", "99.0"], ["8", "99.0"], ["9", "99.0"], ["10", "-99.0"], ["11", "-99.0"], ["12", "-99.0"], ["13", "-99.0"], ["14", "-99.0"], ["15", "-99.0"], ["16", "-99.0"], ["17", "-99.0"], ["18", "-99.0"], ["19", "-99.0"]]
        const sol: Array<returnBal> = round([["0", "10", "99"], ["1", "11", "99"], ["2", "12", "99"], ["3", "13", "99"], ["4", "14", "99"], ["5", "15", "99"], ["6", "16", "99"], ["7", "17", "99"], ["8", "18", "99"], ["9", "19", "99"]])
        expect(optimize(test).sort()).toStrictEqual(sol.sort());
    }, timeout)

    it("Test_7", () => {
        const test: Array<balance> = [["0", "51.0"], ["1", "8.0"], ["2", "-6.0"], ["3", "0.0"], ["4", "4.0"], ["5", "-3.0"], ["6", "-2.0"], ["7", "2.0"], ["8", "1.0"], ["9", "-4.0"], ["10", "4.0"], ["11", "-4.0"], ["12", "8.0"], ["13", "-8.0"], ["14", "2.0"], ["15", "7.0"], ["16", "-6.0"], ["17", "4.0"], ["18", "-4.0"], ["19", "-54.0"]]
        const sol: Array<returnBal> = round([["7", "6", "2"], ["4", "9", "4"], ["10", "11", "4"], ["17", "18", "4"], ["1", "13", "8"], ["8", "5", "1"], ["14", "5", "2"], ["15", "2", "6"], ["15", "16", "1"], ["12", "16", "5"], ["12", "19", "3"], ["0", "19", "51"]])
        const s: Array<returnBal> = optimize(test);
        expect(getBalance(s).filter(e => e[1] != "0.0")).toStrictEqual(test.filter(e => e[1] != "0.0"))
        expect(s.length).toBe(sol.length);
    }, timeout)

    it("Test_8", () => {
        const test: Array<balance> = [["0", "0.0"], ["1", "6.0"], ["2", "-1.0"], ["3", "-2.0"], ["4", "-3.0"], ["5", "9.0"], ["6", "-9.0"], ["7", "5.0"], ["8", "-1.0"], ["9", "3.0"], ["10", "1.0"], ["11", "-2.0"], ["12", "0.0"], ["13", "-4.0"], ["14", "3.0"], ["15", "0.0"], ["16", "3.0"], ["17", "-7.0"], ["18", "7.0"], ["19", "-8.0"]]
        const sol: Array<returnBal> = round([["10", "2", "1"], ["9", "4", "3"], ["18", "17", "7"], ["5", "6", "9"], ["14", "8", "1"], ["14", "3", "2"], ["16", "19", "3"], ["7", "19", "5"], ["1", "11", "2"], ["1", "13", "4"]])
        const s: Array<returnBal> = optimize(test);
        expect(getBalance(s).filter(e => e[1] != "0.0")).toStrictEqual(test.filter(e => e[1] != "0.0"))
        expect(s.length).toBe(sol.length);
    }, timeout)

    it("Test_9", () => {
        const test: Array<balance> = [["0", "-14.0"], ["1", "39.0"], ["2", "4.0"], ["3", "14.0"], ["4", "-15.0"], ["5", "23.0"], ["6", "-30.0"], ["7", "-52.0"], ["8", "29.0"], ["9", "2.0"]]
        const sol: Array<returnBal> = round([["3", "0", "14"], ["5", "7", "23"], ["8", "7", "29"], ["9", "4", "2"], ["2", "4", "4"], ["1", "4", "9"], ["1", "6", "30"]])
        const s: Array<returnBal> = optimize(test);
        expect(getBalance(s).filter(e => e[1] != "0.0")).toStrictEqual(test.filter(e => e[1] != "0.0"))
        expect(s.length).toBe(sol.length);
    }, timeout)

    it("Test_10", () => {
        const test: Array<balance> = [["0", "16.0"], ["1", "-29.0"], ["2", "53.0"], ["3", "-10.0"], ["4", "25.0"], ["5", "-2.0"], ["6", "-19.0"], ["7", "-17.0"], ["8", "-48.0"], ["9", "5.0"], ["10", "30.0"], ["11", "-4.0"]]
        const sol: Array<returnBal> = round([["4", "5", "2"], ["4", "11", "4"], ["4", "6", "19"], ["0", "7", "16"], ["10", "7", "1"], ["10", "1", "29"], ["9", "3", "5"], ["2", "3", "5"], ["2", "8", "48"]])
        const s: Array<returnBal> = optimize(test);
        expect(getBalance(s).filter(e => e[1] != "0.0")).toStrictEqual(test.filter(e => e[1] != "0.0"))
        expect(s.length).toBe(sol.length);
    }, timeout)

    it("Test_11", () => {
        const test: Array<balance> = [["0", "-14.0"], ["1", "-26.0"], ["2", "-48.0"], ["3", "49.0"], ["4", "22.0"], ["5", "-16.0"], ["6", "7.0"], ["7", "-20.0"], ["8", "31.0"], ["9", "18.0"], ["10", "-12.0"], ["11", "0.0"], ["12", "2.0"], ["13", "5.0"], ["14", "2.0"]]
        const sol: Array<returnBal> = round([["13", "10", "5"], ["6", "10", "7"], ["12", "7", "2"], ["9", "7", "18"], ["14", "0", "2"], ["4", "0", "12"], ["4", "5", "10"], ["8", "5", "6"], ["8", "1", "25"], ["3", "1", "1"], ["3", "2", "48"]])
        const s: Array<returnBal> = optimize(test);
        expect(getBalance(s).filter(e => e[1] != "0.0")).toStrictEqual(test.filter(e => e[1] != "0.0"))
        expect(s.length).toBe(sol.length);
    }, timeout)

    it("Test_12", () => {
        const test: Array<balance> = [["0", "18.0"], ["1", "-2.0"], ["2", "19.0"], ["3", "14.0"], ["4", "2.0"], ["5", "19.0"], ["6", "31.0"], ["7", "1.0"], ["8", "-20.0"], ["9", "-9.0"], ["10", "18.0"], ["11", "-27.0"], ["12", "-20.0"], ["13", "-19.0"], ["14", "-18.0"], ["15", "-27.0"], ["16", "1.0"], ["17", "-7.0"], ["18", "9.0"], ["19", "17.0"]]
        const sol: Array<returnBal> = round([["4", "1", "2"], ["18", "9", "9"], ["0", "14", "18"], ["2", "13", "19"], ["7", "8", "1"], ["16", "8", "1"], ["10", "8", "18"], ["3", "17", "7"], ["3", "12", "7"], ["19", "12", "13"], ["19", "11", "4"], ["5", "11", "19"], ["6", "11", "4"], ["6", "15", "27"]])
        const s: Array<returnBal> = optimize(test);
        expect(getBalance(s).filter(e => e[1] != "0.0")).toStrictEqual(test.filter(e => e[1] != "0.0"))
        expect(s.length).toBe(sol.length);
    }, timeout)

    it("Test_13", () => {
        const test: Array<balance> = [["0", "1.0"], ["1", "5.0"], ["2", "9.0"], ["3", "13.0"], ["4", "17.0"], ["5", "21.0"], ["6", "25.0"], ["7", "29.0"], ["8", "33.0"], ["9", "37.0"], ["10", "-3.0"], ["11", "-7.0"], ["12", "-11.0"], ["13", "-15.0"], ["14", "-19.0"], ["15", "-23.0"], ["16", "-27.0"], ["17", "-31.0"], ["18", "-35.0"], ["19", "-19.0"]]
        const sol: Array<returnBal> = round([["0", "10", "1"], ["2", "10", "2"], ["2", "11", "7"], ["3", "12", "11"], ["3", "14", "2"], ["4", "14", "17"], ["5", "19", "19"], ["5", "16", "2"], ["6", "16", "25"], ["1", "13", "5"], ["8", "13", "10"], ["8", "15", "23"], ["7", "17", "29"], ["9", "17", "2"], ["9", "18", "35"]])
        const s: Array<returnBal> = optimize(test);
        expect(getBalance(s).filter(e => e[1] != "0.0")).toStrictEqual(test.filter(e => e[1] != "0.0"))
        expect(s.length).toBe(sol.length);
    }, timeout)

    it("Test_14", () => {
        const test: Array<balance> = [["0", "51.0"], ["1", "-2.0"], ["2", "-1.0"], ["3", "1.0"], ["4", "1.0"], ["5", "100.0"], ["6", "95.0"], ["7", "94.0"], ["8", "93.0"], ["9", "7.0"], ["10", "-6.0"], ["11", "-6.0"], ["12", "-6.0"], ["13", "-6.0"], ["14", "-1.0"], ["15", "-105.0"], ["16", "-100.0"], ["17", "-5.0"], ["18", "-192.0"], ["19", "-12.0"]]
        const sol: Array<returnBal> = round([["3", "2", "1"], ["4", "14", "1"], ["5", "16", "100"], ["9", "1", "2"], ["9", "17", "5"], ["0", "10", "6"], ["0", "11", "6"], ["0", "12", "6"], ["0", "13", "6"], ["0", "19", "12"], ["0", "15", "15"], ["8", "15", "90"], ["8", "18", "3"], ["7", "18", "94"], ["6", "18", "95"]])
        const s: Array<returnBal> = optimize(test);
        expect(getBalance(s).filter(e => e[1] != "0.0")).toStrictEqual(test.filter(e => e[1] != "0.0"))
        expect(s.length).toBe(sol.length);
    }, timeout)

    it("Test_15", () => {
        const test: Array<balance> = [["0", "20.0"], ["1", "35.0"], ["2", "48.0"], ["3", "26.0"], ["4", "22.0"], ["5", "-6.0"], ["6", "-9.0"], ["7", "-11.0"], ["8", "-12.0"], ["9", "-12.0"], ["10", "-9.0"], ["11", "-10.0"], ["12", "-10.0"], ["13", "-11.0"], ["14", "-8.0"], ["15", "-12.0"], ["16", "-10.0"], ["17", "-9.0"], ["18", "-11.0"], ["19", "-11.0"]]
        const sol: Array<returnBal> = round([["0", "11", "10"], ["0", "12", "10"], ["4", "7", "11"], ["4", "13", "11"], ["3", "14", "8"], ["3", "6", "9"], ["3", "10", "9"], ["1", "18", "11"], ["1", "8", "12"], ["1", "9", "12"], ["2", "5", "6"], ["2", "17", "9"], ["2", "16", "10"], ["2", "19", "11"], ["2", "15", "12"]])
        const s: Array<returnBal> = optimize(test);
        expect(getBalance(s).filter(e => e[1] != "0.0")).toStrictEqual(test.filter(e => e[1] != "0.0"))
        expect(s.length).toBe(sol.length);
    }, timeout)
})

describe('Test Settlement', function () {
    const balances: Array<[string, string]> = [
        [
            "@wurm1337:matrix.org",
            "-7.00"
        ],
        [
            "@placebot:matrix.org",
            "0.00"
        ],
        [
            "@kadma:matrix.org",
            "0.00"
        ],
        [
            "@bonobo1337:matrix.org",
            "3.00"
        ],
        [
            "@jg4711:matrix.org",
            "4.00"
        ]
    ];

    it('Test V_star and sums creation from Balances'), function () {
        const soll = [[0, 3, 4], [null, -7, 3, -4, 4, -3, 7, 0]];
        expect(createVStarAndSums(balances)).toStrictEqual(soll);
    };

    it('Test clearPairs from s0', function () {
        const s0 = [35, 12, 20, 24, 28];
        const output_soll = [[35], [12]];
        expect(clearPairs(s0)).toStrictEqual(output_soll);
    });

    it('Test clearNonAtomicSets from s0', function () {
        const s0 = [3, 35, 12, 20, 24, 28];
        const output_soll = [3, 12, 20, 24];
        expect(clearNonAtomicSets(s0)).toStrictEqual(output_soll);
    });

    it('Test get Valid Subset from Number', function () {
        const s0 = [3, 35, 12, 20, 24, 28];
        const output_soll = [3, 24];
        expect(getValidSubsetsFromNumber(27, s0)).toStrictEqual(output_soll);
    });

    /* it('Test if more than 32 nodes', function () { 
         const test: Array<balance> = [["0", "51.0"], ["1", "8.0"], ["2", "-6.0"], ["3", "0.0"], ["4", "4.0"], ["5", "-3.0"], ["6", "-2.0"], ["7", "2.0"], ["8", "1.0"], ["9", "-4.0"], ["10", "4.0"], ["11", "-4.0"], ["12", "8.0"], ["13", "-8.0"], ["14", "2.0"], ["15", "7.0"], ["16", "-6.0"], ["17", "4.0"], ["18", "-4.0"], ["19", "-54.0"],["20", "-54.0"],["21", "-54.0"],["22", "-54.0"],["23", "-54.0"],["24", "-54.0"],["25", "-54.0"],["26", "-54.0"],["27", "-54.0"],["28", "-54.0"],["29", "-54.0"],["30", "-54.0"],["31", "-54.0"],["32", "-54.0"],["33", "-54.0"]]
        expect(optimize(test).sort().tostrictequal)
     });
     */

    it('Testing optimize ', function () {
        const balances: Array<balance>  = [["0", "-14.0"], ["1", "39.0"], ["2", "4.0"], ["3", "14.0"], ["4", "-15.0"], ["5", "23.0"], ["6", "-30.0"], ["7", "-52.0"], ["8", "29.0"], ["9", "2.0"]];
        const soll: Array<returnBal>= round([['3', '0', '14'], ['9', '6', '2'], ['2', '6', '4'], ['1', '6', '24'], ['1', '4', '15'], ['8', '7', '29'], ['5', '7', '23']]);
        expect(optimize(balances).sort()).toStrictEqual(soll.sort());
    });


})
